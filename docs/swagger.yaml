basePath: /
definitions:
  handler.CreateUserRequest:
    properties:
      password:
        minLength: 6
        type: string
      role:
        type: string
      username:
        type: string
    required:
    - password
    - role
    - username
    type: object
  handler.CreateUserResponse:
    properties:
      data:
        $ref: '#/definitions/models.User'
      message:
        type: string
    type: object
  handler.EditUserRequest:
    properties:
      password:
        minLength: 6
        type: string
      role:
        type: string
      username:
        type: string
    required:
    - role
    - username
    type: object
  handler.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  handler.GetAllUsersResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/models.User'
        type: array
      limit:
        type: integer
      page:
        type: integer
      total:
        type: integer
    type: object
  handler.LoginRequest:
    properties:
      password:
        minLength: 6
        type: string
      username:
        description: Validasi email untuk username
        type: string
    required:
    - password
    - username
    type: object
  handler.LoginResponse:
    properties:
      token:
        type: string
    type: object
  handler.ProfileResponse:
    properties:
      message:
        type: string
    type: object
  handler.UpdateUserResponse:
    properties:
      data:
        $ref: '#/definitions/models.User'
      message:
        type: string
    type: object
  models.Permission:
    properties:
      created_at:
        type: string
      id:
        type: integer
      name:
        type: string
      updated_at:
        type: string
    type: object
  models.Role:
    properties:
      created_at:
        type: string
      id:
        type: integer
      name:
        type: string
      permissions:
        items:
          $ref: '#/definitions/models.Permission'
        type: array
      updated_at:
        type: string
    type: object
  models.User:
    properties:
      created_at:
        type: string
      deleted_at:
        type: string
      id:
        type: string
      permissions:
        items:
          $ref: '#/definitions/models.Permission'
        type: array
      role:
        type: string
      roles:
        items:
          $ref: '#/definitions/models.Role'
        type: array
      updated_at:
        type: string
      username:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: This is a User Management API.
  title: My API
  version: "1.0"
paths:
  /login:
    post:
      consumes:
      - application/json
      description: Authenticate user and return JWT token
      parameters:
      - description: Login Request
        in: body
        name: loginRequest
        required: true
        schema:
          $ref: '#/definitions/handler.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.LoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Login
  /profile:
    get:
      description: Get user profile information
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.ProfileResponse'
      summary: Profile
  /users:
    get:
      description: Retrieve a list of users with pagination, filtering, and sorting
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Number of users per page
        in: query
        name: limit
        type: integer
      - default: '"created_at desc"'
        description: Sorting criteria
        in: query
        name: sort
        type: string
      - description: Filter by username
        in: query
        name: username
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.GetAllUsersResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Get all users
    post:
      consumes:
      - application/json
      description: Create a new user with the provided details
      parameters:
      - description: Create User Request
        in: body
        name: createUserRequest
        required: true
        schema:
          $ref: '#/definitions/handler.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/handler.CreateUserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Create a new user
  /users/{id}:
    get:
      description: Retrieve a user by their ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Get user by ID
    put:
      consumes:
      - application/json
      description: Update user details by their ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: Edit User Request
        in: body
        name: editUserRequest
        required: true
        schema:
          $ref: '#/definitions/handler.EditUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.UpdateUserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Update an existing user
swagger: "2.0"
